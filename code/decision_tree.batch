> args <- commandArgs(trailingOnly = TRUE)
> print(args)
[1] "'gini'" "10"     "30"    
> 
> library(rpart) 
> library(mda)
Loading required package: class
Loaded mda 0.4-4

> 
> set.seed(123)
> subsets <- 5 #TODO remove subsets
> k <- 10
> file=file.choose()
> dataset <- read.csv(file, na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
> file_name <- basename(file)
> ############################# Partition ##############################
> 
> dataset.class0 <- which(dataset$bug == 0)
> dataset.class1 <- which(dataset$bug == 1)
> perc = 1/subsets
> bestmodel <- ""
> premisclassification <- 100
> 
> for (subset in 1:(subsets)) {
+   subset.class0.start <- round((subset-1)*perc*length(dataset.class0)+1)
+   subset.class0.end <- round(subset*perc*length(dataset.class0))
+   subset.class0 <- dataset.class0[subset.class0.start:subset.class0.end]
+   
+   subset.class1.start <- (subset-1)*perc*length(dataset.class1)+1
+   subset.class1.end <- (subset)*perc*length(dataset.class1)
+   subset.class1 <- dataset.class1[subset.class1.start:subset.class1.end]
+   
+   subset.total <- c(subset.class0, subset.class1)
+   subset.train.class0 <- subset.class0[1:round(0.9*length(subset.class0))]
+   subset.train.class1 <- subset.class1[1:round(0.9*length(subset.class1))]
+   subset.train <- c(subset.train.class0, subset.train.class1)
+   subset.test <- setdiff(subset.total, subset.train)
+   
+   subset.train.data <- dataset[subset.train,]
+   subset.test.data <- dataset[subset.test,]
+   
+   n <- nrow(subset.train.data)
+   fold <- rep(0,n)
+   c <- 0
+   for (i in 1:(n %/% k)) {
+     for (j in 1:k) {
+       fold[c] <- j
+       c <- c + 1
+     }
+   }
+   fold <- fold[sample(1:length(fold), length(fold), replace=F)]
+   
+   # Perform k-fold Cross Validation
+   
+   m.error <- 100
+   m.tree <- ""
+   
+   for(i in 1:k) {
+     cv.index = which(fold == i)
+     train.index = setdiff(1:length(fold),cv.index)
+     
+     tree = rpart(bug ~., subset.train.data[train.index,], method="class", parms=list(split=args[1]), control=rpart.control(minsplit=args[2],minbucket=args[3],cp=0))
+     pred <- predict(tree, subset.train.data[cv.index,], type="class")
+     cm <- confusion(pred, factor(subset.train.data[cv.index,"bug"], levels=c(0,1)))
+     c.error <- as.numeric(as.character(attr(cm, "error")))
+     
+     if(c.error < m.error) {
+       m.error <- c.error
+       m.tree <- tree
+     }
+   }
+   
+   # Test on the best model returned by CV
+   
+   pred <- predict(m.tree, subset.test.data, type="class")
+   cm <- confusion(pred, factor(subset.test.data$bug, levels=c(0,1)))
+   misclassification <- as.numeric(as.character(attr(cm, "error")))
+   print(misclassification)
+   if(misclassification < premisclassification) {
+     bestmodel <- m.tree
+     premisclassification <- misclassification
+   }
+ }
[1] 0.5454545
[1] 0.4222222
[1] 0.1818182
[1] 0.4
[1] 0.3863636
> 
> bestmodel
n= 364 

node), split, n, loss, yval, (yprob)
      * denotes terminal node

 1) root 364 181 0 (0.5027473 0.4972527)  
   2) npm< 3.005475 151  52 0 (0.6556291 0.3443709)  
     4) cam< 0.4647307 37   4 0 (0.8918919 0.1081081) *
     5) cam>=0.4647307 114  48 0 (0.5789474 0.4210526)  
      10) ce< 1.001181 43  12 0 (0.7209302 0.2790698) *
      11) ce>=1.001181 71  35 1 (0.4929577 0.5070423)  
        22) ce>=2.989821 32  11 0 (0.6562500 0.3437500) *
        23) ce< 2.989821 39  14 1 (0.3589744 0.6410256) *
   3) npm>=3.005475 213  84 1 (0.3943662 0.6056338)  
     6) ce>=11.96036 48  18 0 (0.6250000 0.3750000) *
     7) ce< 11.96036 165  54 1 (0.3272727 0.6727273)  
      14) mfa< 0.7851333 116  47 1 (0.4051724 0.5948276)  
        28) rfc< 17.08635 55  24 0 (0.5636364 0.4363636) *
        29) rfc>=17.08635 61  16 1 (0.2622951 0.7377049) *
      15) mfa>=0.7851333 49   7 1 (0.1428571 0.8571429) *
> modelfile=paste(paste("../models/",file_name, sep=""), ".rda", sep="")
> modelfile
[1] "../models/camel-training.csv.rda"
> save(bestmodel, file=modelfile)
> ################# End of Pre-processing and partition ################
> 
> 
